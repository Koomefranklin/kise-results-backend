# Generated by Django 5.0.6 on 2024-07-31 08:51

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Course',
            fields=[
                ('code', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('code', models.CharField(max_length=10, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='Session',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('period', models.IntegerField(choices=[(1, 'First'), (2, 'Second')])),
                ('mode', models.CharField(choices=[('DL', 'Distance Learning'), ('FT', 'Full Time')], max_length=2)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=200)),
                ('sex', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=2)),
                ('role', models.CharField(choices=[('student', 'Student'), ('lecturer', 'Lecturer'), ('admin', 'Admin')], default='student', max_length=10)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Lecturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('HoD', 'Team Leader'), ('Lecturer', 'Lecturer')], default='Lecturer', max_length=10)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='LecturerModule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('period', models.CharField(max_length=50)),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.lecturer')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.module')),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('code', models.CharField(max_length=8, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.course')),
            ],
        ),
        migrations.AddField(
            model_name='module',
            name='paper',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.paper'),
        ),
        migrations.CreateModel(
            name='CatCombination',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('cat1', models.ManyToManyField(related_name='cat1', to='dev.module')),
                ('cat2', models.ManyToManyField(related_name='cat2', to='dev.module')),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.paper')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.session'),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('index', models.IntegerField()),
                ('centre', models.CharField(max_length=20)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.session')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Specialization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.course')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.student')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cat1', models.IntegerField(blank=True, null=True)),
                ('cat2', models.IntegerField(blank=True, null=True)),
                ('paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.paper')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.student')),
            ],
        ),
        migrations.CreateModel(
            name='ModuleScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.IntegerField()),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.module')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.student')),
            ],
        ),
        migrations.CreateModel(
            name='AdmissionNumber',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission', models.CharField(max_length=20, unique=True)),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.student')),
            ],
        ),
        migrations.CreateModel(
            name='TeamLeader',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.course')),
                ('lecturer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dev.lecturer')),
            ],
        ),
        migrations.AddConstraint(
            model_name='lecturer',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_lecturer_user'),
        ),
        migrations.AddConstraint(
            model_name='student',
            constraint=models.UniqueConstraint(fields=('user',), name='unique_student_user'),
        ),
        migrations.AddConstraint(
            model_name='specialization',
            constraint=models.UniqueConstraint(fields=('student', 'course'), name='unique_student_course'),
        ),
        migrations.AddConstraint(
            model_name='result',
            constraint=models.UniqueConstraint(fields=('student', 'paper'), name='unique_student_result'),
        ),
        migrations.AddConstraint(
            model_name='modulescore',
            constraint=models.UniqueConstraint(fields=('student', 'module'), name='unique_student_module'),
        ),
        migrations.AddConstraint(
            model_name='teamleader',
            constraint=models.UniqueConstraint(fields=('lecturer',), name='unique_teamleader'),
        ),
    ]
